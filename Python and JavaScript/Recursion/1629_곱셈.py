'''
나머지 분배 법칙
(A*B)%C = ((A%C) * (B%C))%C

DAC 분할정복 문제 - 연산 횟수를 log N으로 줄여줌
10^100 - 연산 횟수 100번 O(N)
= (10^50)^2
= ((10^25)^2)^2
= ((10 * 10^24)^2)^2
= ((10 * (10^12)^2)^2)^2
= ((10 * ((10^6)^2)^2)^2)^2
= ((10 * (((10^3)^2)^2)^2)^2)^2
= ((10 * (((10 * 10^2)^2)^2)^2)^2)^2 - 연산 횟수 9번 O(log N)

이 문제의 경우 제곱의 최댓값이 2,147,483,647이므로 그대로 제곱한다면 시간 초과가 발생한다.
그렇기 때문에 분할정복을 이용하여 연산횟수를 줄여야 한다.

ex) 10, 11, 12
10^11 % 12
= (10 * 10^10) % 12
= ((10 % 12) * (10^10 % 12)) % 12
= ((10 % 12) * ((10^5 * 10^5) % 12)) % 12
= ((10 % 12) * (((10^5 % 12) * (10^5 % 12)) % 12)) % 12
= ((10 % 12) * (((10^5 % 12)^2) % 12)) % 12
= (10 * ((10^5 % 12)^2)) % 12
'''


def find_left(num, power):
    # 거듭제곱 횟수가 1인 경우
    if power == 1:
        return num % C
    # 거듭 제곱 횟수가 홀수인 경우
    if power % 2:
        return (num * (find_left(num, power // 2) ** 2)) % C
    # 거듭 제곱 횟수가 짝수인 경우
    return (find_left(num, power // 2) ** 2) % C


A, B, C = map(int, input().split())
print(find_left(A, B))
